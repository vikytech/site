<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://vikytech.in/blogs/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vikytech.in/" rel="alternate" type="text/html" /><updated>2024-02-03T15:07:28+05:30</updated><id>https://vikytech.in/blogs/feed.xml</id><title type="html">VikyTech</title><subtitle>Site to share my learnings in form of blogs.</subtitle><author><name>Vikhyath Choradia</name></author><entry><title type="html">A Concise Guide to OpenID Connect (OIDC)</title><link href="https://vikytech.in/oidc" rel="alternate" type="text/html" title="A Concise Guide to OpenID Connect (OIDC)" /><published>2023-05-22T11:10:21+05:30</published><updated>2023-05-22T11:10:21+05:30</updated><id>https://vikytech.in/oidc</id><content type="html" xml:base="https://vikytech.in/oidc"><![CDATA[<p>Introduction:
In the world of web authentication and authorization, OpenID Connect (OIDC) has emerged as a popular standard. It builds upon the OAuth 2.0 framework to provide a simple and secure way to authenticate users and access their identity information. In this blog post, we’ll explore the basics of OIDC, its key components, and how it works.</p>

<ol>
  <li>
    <p>What is OIDC?
OpenID Connect is an identity layer built on top of OAuth 2.0. It allows clients (applications or services) to verify the identity of end-users based on the authentication performed by an authorization server. OIDC enables a user to log in to one website and use their identity information to access multiple other websites or services without sharing their credentials.</p>
  </li>
  <li>Key Components:
    <ul>
      <li>Client: The application or service that wants to authenticate the user.</li>
      <li>Identity Provider (IDP): The server responsible for authenticating the user and providing identity information.</li>
      <li>Authorization Server (AS): The server that issues access tokens and provides authorization services.</li>
      <li>User: The person who wants to access the client application.</li>
    </ul>
  </li>
  <li>OIDC Flow:
The OIDC flow involves several steps:
    <ul>
      <li>Client Registration: The client registers with the authorization server and obtains a client identifier and secret.</li>
      <li>User Authentication: The user is redirected to the IDP, where they authenticate themselves.</li>
      <li>Authorization Grant: After successful authentication, the IDP provides an authorization code to the client.</li>
      <li>Token Exchange: The client exchanges the authorization code for an access token and an ID token from the authorization server.</li>
      <li>Accessing Resources: The client uses the access token to request resources from a resource server.</li>
    </ul>
  </li>
  <li>
    <p>ID Token:
The ID token is a crucial part of OIDC. It contains claims about the authenticated user, such as their name, email, and user ID. The client can use this information for user identification and personalization.</p>
  </li>
  <li>Benefits of OIDC:
    <ul>
      <li>Single Sign-On (SSO): Users can authenticate once and access multiple services without needing to enter their credentials repeatedly.</li>
      <li>Secure Identity Exchange: OIDC leverages the security features of OAuth 2.0 to ensure the confidentiality and integrity of user identity information.</li>
      <li>Standardized Protocol: OIDC is a widely adopted standard, with support from major identity providers and libraries, making it easier to implement and integrate into applications.</li>
    </ul>
  </li>
</ol>

<p>Conclusion:
OpenID Connect (OIDC) provides a standardized and secure solution for user authentication and identity management in modern web applications. By leveraging the power of OAuth 2.0, OIDC enables developers to implement robust authentication mechanisms and deliver a seamless user experience. Understanding the basics of OIDC and its key components is crucial for building secure and user-friendly applications in today’s interconnected digital landscape.</p>

<p>References:</p>
<ul>
  <li><a href="https://openid.net/connect/">OpenID Connect website</a></li>
  <li><a href="https://datatracker.ietf.org/doc/html/rfc6749">OAuth 2.0 specification</a></li>
  <li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">OpenID Connect explained</a></li>
  <li><a href="https://openid.net/developers/certified/">Identity Providers supporting OIDC</a></li>
  <li><a href="https://openid.net/developers/certified/">OIDC libraries and SDKs</a></li>
</ul>]]></content><author><name>Vikhyath Choradia</name></author><category term="oidc" /><category term="authentication" /><summary type="html"><![CDATA[Introduction: In the world of web authentication and authorization, OpenID Connect (OIDC) has emerged as a popular standard. It builds upon the OAuth 2.0 framework to provide a simple and secure way to authenticate users and access their identity information. In this blog post, we’ll explore the basics of OIDC, its key components, and how it works.]]></summary></entry><entry><title type="html">QR based authentication</title><link href="https://vikytech.in/QR-auth" rel="alternate" type="text/html" title="QR based authentication" /><published>2023-04-12T11:06:36+05:30</published><updated>2023-04-12T11:06:36+05:30</updated><id>https://vikytech.in/qr-based-authentication</id><content type="html" xml:base="https://vikytech.in/QR-auth"><![CDATA[<h1 id="what-is-qr-based-authentication-">What is QR based authentication ?</h1>
<p>QR codes have become ubiquitous in today’s digital world, used for everything from advertising campaigns to event check-ins. They are also being increasingly used for secure authentication and access control. In this blog post, we will explore how QR-based authentication works and its benefits.</p>

<p>QR-based authentication systems work by generating a unique QR code that can be scanned by a mobile device. The QR code contains a unique identifier that is linked to the user’s account information, such as a password or other authentication credentials. When the user scans the QR code with their mobile device, the system verifies their identity and grants them access to the desired resource.</p>

<p>One of the primary benefits of QR-based authentication is that it is highly secure. Since each QR code is unique, it is extremely difficult for unauthorized users to gain access to a system or resource. Additionally, QR-based authentication can be used as a second factor of authentication, providing an extra layer of security.</p>

<hr />
<h1 id="user-journey">User journey</h1>

<p><img src="/assets/images/posts/QR-auth-userflow.png" alt="User Journey" width="800px" height="100%" /></p>

<hr />
<h2 id="three-main-components">Three main components</h2>

<h3 id="authentication-server">Authentication Server:</h3>
<p>This is the main server that handles authentication requests from users. It stores user credentials and generates unique QR codes that are linked to each user’s account.</p>

<h3 id="qr-code-generator">QR Code Generator:</h3>
<p>This component generates a unique QR code for each authentication request. The QR code contains a unique identifier that is linked to the user’s account information.</p>

<h3 id="mobile-application">Mobile Application:</h3>
<p>This is the user-facing component of the system. Users scan the QR code using a mobile device that has the authentication application installed. The application sends the scanned QR code to the authentication server for verification.</p>

<p>When a user wants to access a resource or service that requires authentication, they open the client website. The client application generates a request for a auth code from the authentication server. The server generates a unique auth code and the client application uses it to generate the QR code. The user then scans the QR code with their mobile device. The authentication application sends the scanned QR code to the authentication server for verification. If the code is valid, the server grants access to the requested resource or service by performing <a href="/oidc">OIDC</a> dance.</p>

<hr />

<h2 id="few-downsides">Few downside(s)</h2>

<p>While QR-based authentication has several advantages, there are also some potential drawbacks and limitations to consider. Here are some cons of QR-based authentication:</p>

<p>Dependence on Mobile Device: QR-based authentication relies heavily on mobile devices and their associated technology, such as cameras and QR code scanners. If a user’s device does not have these features or they are not functioning correctly, the authentication process may not be possible.</p>

<h3 id="security-concerns">Security Concerns:</h3>
<p>While QR codes are unique and difficult to replicate, they can still be vulnerable to hacking and spoofing attacks if they are not implemented keeping security in mind.</p>

<p>For example, an attacker could create a fake QR code that looks legitimate and trick a user into scanning it, thereby compromising their security. Similar to traditional phishing attacks, fraudsters can create fake websites or landing pages that display a QR code, often resembling those used by trusted organizations or services. Unsuspecting users who scan the code may unknowingly provide their login credentials or other sensitive information, which can be used for fraudulent activities.</p>

<p>Another example may be where fraudsters can use QR codes as part of social engineering scams, they may send an email / text message or via social media apps like WhatsApp / Telegram to individuals, posing as a trusted organization or friend, and include a QR code. The message may claim that scanning the code is necessary to verify identity or unlock special offers. However, the code may actually lead to a fraudulent website or prompt the user to enter personal information that can be misused.</p>

<h3 id="single-factor-authentication">Single Factor Authentication:</h3>
<p>While QR-based authentication can be used as a second factor of authentication, it is primarily a single factor authentication method. This means that it may not be sufficient for securing highly sensitive or critical resources and systems.</p>

<hr />
<blockquote>
  <p>In conclusion, QR-based authentication systems provide a secure, convenient solution for authentication and access control. With the widespread use of smartphones and the increasing need for secure authentication, QR-based authentication is becoming an increasingly popular choice for businesses and organizations of all sizes.</p>
</blockquote>]]></content><author><name>Vikhyath Choradia</name></author><category term="authentication" /><summary type="html"><![CDATA[What is QR based authentication ? QR codes have become ubiquitous in today’s digital world, used for everything from advertising campaigns to event check-ins. They are also being increasingly used for secure authentication and access control. In this blog post, we will explore how QR-based authentication works and its benefits.]]></summary></entry><entry><title type="html">Micro services in Local</title><link href="https://vikytech.in/MIL" rel="alternate" type="text/html" title="Micro services in Local" /><published>2021-06-04T16:00:00+05:30</published><updated>2021-06-04T16:00:00+05:30</updated><id>https://vikytech.in/manage-multiple-microservice-in-local</id><content type="html" xml:base="https://vikytech.in/MIL"><![CDATA[<p>We have all been there when we wanted to start multiple dependent micro service(s) at once in our local to develop / test an application.</p>

<p>Well as a developer I have always believed that writing automation take time but eventually saves time!!</p>

<p>Now that you have read until here you are curious enough to know the solution I have in mind right!!</p>

<p>Let quickly jump to that section below.</p>

<h2 id="setup">Setup</h2>

<p>The setup is quite simple and easy to setup for mac</p>

<ul>
  <li>
    <h3 id="install">Install</h3>
    <ul>
      <li>
        <h4 id="using-homebrew">Using homebrew</h4>
        <p><code class="language-plaintext highlighter-rouge">brew install foreman</code></p>
      </li>
      <li>
        <h4 id="using-npm">Using <a href="https://www.npmjs.com/package/foreman">npm</a></h4>
        <p><code class="language-plaintext highlighter-rouge">npm install -g foreman</code></p>
      </li>
    </ul>

    <p>Note: If you install via npm then replace the command <code class="language-plaintext highlighter-rouge">foreman</code> with <code class="language-plaintext highlighter-rouge">nf</code></p>
  </li>
  <li>
    <h3 id="define">Define</h3>

    <p>Go ahead and define a simple <code class="language-plaintext highlighter-rouge">Procfile</code> as below in <code class="language-plaintext highlighter-rouge">root</code> folder of all your services</p>
  </li>
</ul>

<div class="code-container">
    <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">&lt;BACKEND_SERVICE_NAME&gt;</span><span class="pi">:</span> <span class="s">cd PATH_TO_SERVICE &amp;&amp; &lt;COMMAND_TO_START_THE_SERVICE&gt;</span>
<span class="na">&lt;YET_ANOTHER_BACKEND_SERVICE_NAME&gt;</span><span class="pi">:</span> <span class="s">cd PATH_TO_SERVICE &amp;&amp;  &lt;COMMAND_TO_START_THE_SERVICE&gt;</span>
<span class="na">&lt;FRONTEND_SERVICE_NAME&gt;</span><span class="pi">:</span> <span class="s">cd PATH_TO_SERVICE &amp;&amp; &lt;COMMAND_TO_START_THE_SERVICE_2&gt;</span>
</code></pre></div></div>

<p><strong>Example:</strong></p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">web</span><span class="pi">:</span> <span class="s">cd webserver &amp;&amp; ./gradlew build&gt;</span>
<span class="na">payment</span><span class="pi">:</span> <span class="s">cd payments &amp;&amp;  rails serve</span>
<span class="na">ui</span><span class="pi">:</span> <span class="s">cd frontend &amp;&amp; npm run dev</span>
</code></pre></div></div>

<ul>
  <li>
    <h3 id="run">Run</h3>
    <p><code class="language-plaintext highlighter-rouge">foreman start</code></p>
  </li>
</ul>

<p><strong>Logs:</strong></p>
<pre><code class="language-log">18:51:12: web.1     |  Web Server started listening on 0.0.0.0:8080
18:51:12: payment.1 |  Payments started listening on 0.0.0.0:3000
18:51:12: ui.1      |  node started listening on 0.0.0.0:4000
</code></pre>

<p>The setup is that simple and easy to use</p>

<h3 id="advance-usage">Advance usage</h3>
<p>You can start multiple instance of the any service to scale and balance the load</p>

<p><code class="language-plaintext highlighter-rouge">foreman start web=5 payment=3</code></p>

<p><strong>Logs:</strong></p>
<pre><code class="language-log">18:51:12: web.1     |  Web Server started listening on 0.0.0.0:8080
18:51:12: web.2     |  Web Server started listening on 0.0.0.0:8081
18:51:12: web.3     |  Web Server started listening on 0.0.0.0:8082
18:51:12: web.4     |  Web Server started listening on 0.0.0.0:8083
18:51:12: web.5     |  Web Server started listening on 0.0.0.0:8084
18:51:12: payment.1 |  Payments started listening on 0.0.0.0:3000
18:51:12: payment.2 |  Payments started listening on 0.0.0.0:3001
18:51:12: payment.3 |  Payments started listening on 0.0.0.0:3002
18:51:12: ui.1      |  node started listening on 0.0.0.0:4000
</code></pre>

<p>For more options and official documentation on the same find it <a href="https://ddollar.github.io/foreman">here</a></p>]]></content><author><name>Vikhyath Choradia</name></author><category term="utility" /><category term="microservices" /><category term="microservices" /><summary type="html"><![CDATA[We have all been there when we wanted to start multiple dependent micro service(s) at once in our local to develop / test an application.]]></summary></entry><entry><title type="html">Mutation Testing</title><link href="https://vikytech.in/mutation-testing" rel="alternate" type="text/html" title="Mutation Testing" /><published>2020-10-29T07:00:00+05:30</published><updated>2020-10-29T07:00:00+05:30</updated><id>https://vikytech.in/Mutation-Testing</id><content type="html" xml:base="https://vikytech.in/mutation-testing"><![CDATA[<p><a href="https://www.youtube.com/watch?v=nTTp8c1C8jA"><img src="/assets/images/posts/mutation-testing.png" alt="Watch the video" /></a></p>

<p><a href="https://github.com/vikytech/MutationTesting">Demo</a></p>

<h1 id="what-is-mutation-testing">What is Mutation testing</h1>

<p>Mutation testing (or mutation analysis or program mutation) is used to design new software tests and evaluate the quality of existing software tests.
Each mutated version is called a mutant and tests detect and reject mutants by causing the behavior of the original version to differ from the mutant.</p>

<h2 id="things-to-consider">Things to consider</h2>

<ul>
  <li>Limit the mutation operators used</li>
  <li>Limit the number of mutations per class</li>
  <li>Tweak the number of threads</li>
  <li>Target only specific portions of your codebase</li>
  <li>Don’t run this with every commit as it takes time to run these test….may be as smoke test</li>
</ul>

<h2 id="setup">Setup</h2>

<ul>
  <li><a href="#gradle">Gradle</a></li>
  <li><a href="#intellij-plugin">Intellij Plugin</a></li>
  <li><a href="#command-line">CLI</a></li>
</ul>

<h3 id="gradle">Gradle</h3>

<p>Add Pitest plugin to gradle</p>
<div class="code-container">
    <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">id</span> <span class="s1">'info.solidsoft.pitest'</span> <span class="n">version</span> <span class="s1">'1.6.0'</span>
</code></pre></div></div>

<p>Create pitest task with your needed configuration</p>
<div class="code-container">
    <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pitest</span> <span class="o">{</span>
    <span class="n">mainSourceSets</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">])</span> <span class="c1">// Only for individual contribution, not recommended for repo having more than 10-15 classes</span>
    <span class="n">testSourceSets</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">])</span> <span class="c1">// Only for individual contribution, not recommended for repo having more than 10-15 classes</span>
    <span class="n">targetClasses</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="s2">"com.foo.*"</span><span class="o">,</span><span class="s2">"com.bar.*"</span><span class="o">])</span> <span class="c1">// Ignore if mainSourceSets &amp; testSourceSets is specified</span>
    <span class="n">excludedClasses</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="s2">"com.foo1.*"</span><span class="o">,</span><span class="s2">"com.bar.IT*"</span><span class="o">])</span>  <span class="c1">// Ignore if mainSourceSets &amp; testSourceSets is specified</span>
    <span class="n">pitestVersion</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s1">'1.6.7'</span><span class="o">)</span> <span class="c1">// Not needed if you want to use the default version provided by plugin</span>
    <span class="n">junit5PluginVersion</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s1">'0.14'</span><span class="o">)</span>
    <span class="n">outputFormats</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="s1">'HTML'</span><span class="o">])</span> <span class="c1">// XML is also available</span>
    <span class="n">mutators</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="s2">"ROR"</span><span class="o">,</span> <span class="s2">"RETURN_VALS"</span><span class="o">,</span> <span class="s2">"INVERT_NEGS"</span><span class="o">,</span> <span class="s2">"MATH"</span><span class="o">,</span> <span class="s2">"VOID_METHOD_CALLS"</span><span class="o">,</span> <span class="s2">"NON_VOID_METHOD_CALLS"</span><span class="o">])</span>
    <span class="n">avoidCallsTo</span><span class="o">.</span><span class="na">set</span><span class="o">([</span><span class="s2">"java.util"</span><span class="o">,</span> <span class="s2">"java.lang"</span><span class="o">])</span>
    <span class="n">threads</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
    <span class="n">timestampedReports</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
    <span class="n">mutationThreshold</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">95</span><span class="o">)</span>
    <span class="n">coverageThreshold</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">95</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Bind the created task with <code class="language-plaintext highlighter-rouge">test</code>/<code class="language-plaintext highlighter-rouge">build</code> task as required</p>
<div class="code-container">
    <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="o">{</span>
    <span class="n">finalizedBy</span> <span class="s1">'pitest'</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="intellij-plugin">Intellij Plugin</h3>

<p>Intellij idea → Preferences → Plugins → search “<a href="https://plugins.jetbrains.com/plugin/7119-pit-mutation-testing-idea-plugin/">PIT mutation testing Idea plugin</a>”</p>

<h4 id="extra-params-passed-to-plugin">Extra Params passed to plugin:</h4>

<p>Edit configuration for Pitest Runner and add the needed parameters from below</p>

<h4 id="target-classes">Target Classes:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Flag: --targetClasses
    Possible Values: PackagePath

    Eg: `--targetClasses com.foo.service.auth*,com.foo.service.product.service.*`
</code></pre></div></div>

<h4 id="source-directory">Source Directory:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Flag: --sourceDirs
    Possible Value: Package ROOT Path

    Eg: `--sourceDirs &lt;PATH_TO_BASE_DIR&gt;/service/src/main`
</code></pre></div></div>

<h4 id="output-formats">Output Formats:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List of formats in which to write mutation results as the mutations are analysed. Supported formats are HTML, XML, CSV.

    Flag: --outputFormats
    Possible Values: XML,HTML

    Eg: `--outputFormats XML,HTML`
</code></pre></div></div>

<h4 id="exclude-unit-tests">Exclude Unit Tests:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Flag: --excludedClasses
    Possible Values: REGEX/FileName
Eg: `--excludedClasses *Test`
</code></pre></div></div>

<h4 id="exclude-integration-tests">Exclude Integration Tests:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Flag: --excludedTestClasses
    Possible Values: REGEX/FileName

    Eg: `--excludedTestClasses *IntegrationTests,*IntegrationTest`

    PIT filters are matched against the class names in the compiled binary, not against the source file name.
</code></pre></div></div>

<h4 id="exclude-annotators">Exclude annotators:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flag: --excludedMethods
Possible Values: annotator names

Eg: `--excludedMethods toString,hashCode,equals`

    Excluded methods are used to avoid creating mutants within methods that match the supplied list of names.

PIT test will not consider spring annotator like @Service, @Api, @RestController whereas it mutates other value based spring annotations like @Value and also java annotations like @ToString,@EqualsAndHashCode
</code></pre></div></div>

<h4 id="customize-mutators">Customize mutator(s):</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flag: --mutators
Possible Values: Mutator type

Eg: `--mutators ROR,RETURN_VALS`

List of Mutators recommended
    ROR
    RETURN_VALS
    INVERT_NEGS
    MATH
    VOID_METHOD_CALLS
    NON_VOID_METHOD_CALLS
</code></pre></div></div>
<p>If we need to use other mutators, vist <a href="https://pitest.org/quickstart/mutators">official page</a></p>

<h4 id="verbose">Verbose:</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flag: --verbose
</code></pre></div></div>

<h2 id="command-line">Command Line</h2>

<p>export a variable named <code class="language-plaintext highlighter-rouge">$CLASSPATH</code> and add all the paths to the dependency jars and <a href="https://github.com/hcoles/pitest/releases">Pitest jars</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pitest jars
* pitest-x.y.z.jar
* pitest-command-line-x.y.z.jar
* pitest-entry-x.y.z.jar
</code></pre></div></div>

<p>Command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java -cp $CLASSPATH \

org.pitest.mutationtest.commandline.MutationCoverageReport \

--reportDir &lt;PROJECT_PATH&gt;/build/reports/pittest \

--sourceDirs &lt;PROJECT_PATH&gt;/&lt;MAIN_SRC_PATH&gt; \

--outputFormats XML,HTML \

--mutators ROR,RETURN_VALS,INVERT_NEGS,MATH,VOID_METHOD_CALLS \

--targetClasses "com.foo.service.auth*,com.foo.service.product.*" \

--excludedClasses "*Test" \

--excludedTestClasses "*IntegrationTests,*IntegrationTest"
</code></pre></div></div>

<h4 id="note-all-the-above-documentation-tested-on-pitest-167">NOTE: All the above documentation tested on Pitest-1.6.7</h4>]]></content><author><name>Vikhyath Choradia</name></author><category term="talks" /><category term="java" /><category term="java" /><category term="mutation-testing" /><category term="pit" /><summary type="html"><![CDATA[]]></summary></entry></feed>